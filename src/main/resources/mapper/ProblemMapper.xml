<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noi.oj.dao.ProblemMapper">
  <resultMap id="BaseResultMap" type="com.noi.oj.domain.Problem">
    <id column="problem_id" jdbcType="INTEGER" property="problemId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="spj" jdbcType="CHAR" property="spj" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="in_date" jdbcType="TIMESTAMP" property="inDate" />
    <result column="time_limit" jdbcType="INTEGER" property="timeLimit" />
    <result column="memory_limit" jdbcType="INTEGER" property="memoryLimit" />
    <result column="defunct" jdbcType="CHAR" property="defunct" />
    <result column="accepted" jdbcType="INTEGER" property="accepted" />
    <result column="submit" jdbcType="INTEGER" property="submit" />
    <result column="solved" jdbcType="INTEGER" property="solved" />
    <result column="packet_id" jdbcType="INTEGER" property="packetId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="is_free" jdbcType="TINYINT" property="isFree" />
    <result column="difficulty" jdbcType="TINYINT" property="difficulty" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="result" jdbcType="SMALLINT" property="result" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.noi.oj.domain.ProblemWithBLOBs">
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="input" jdbcType="LONGVARCHAR" property="input" />
    <result column="output" jdbcType="LONGVARCHAR" property="output" />
    <result column="sample_input" jdbcType="LONGVARCHAR" property="sampleInput" />
    <result column="sample_output" jdbcType="LONGVARCHAR" property="sampleOutput" />
    <result column="hint" jdbcType="LONGVARCHAR" property="hint" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    problem_id, title, spj, source, in_date, time_limit, memory_limit, defunct, accepted, 
    submit, solved
  </sql>
  <sql id="Blob_Column_List">
    description, input, output, sample_input, sample_output, hint
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.noi.oj.domain.ProblemExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from problem
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.noi.oj.domain.ProblemExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from problem
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select a.*,c.name,c.packet_id,d.difficulty
    from (select problem_id, title, spj, source, in_date, time_limit, memory_limit, defunct, accepted,
    submit, solved, description, input, output, sample_input, sample_output, hint
    from problem
    where problem_id = #{problemId,jdbcType=INTEGER}) as a
    inner join problem_packet_ship as b on a.problem_id=b.problem_id
    inner join problem_packet as c on b.packet_id = c.packet_id
    inner join problem_class as d on a.problem_id = d.problem_id
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from problem
    where problem_id = #{problemId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.noi.oj.domain.ProblemExample">
    delete from problem
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.noi.oj.domain.ProblemWithBLOBs">
    insert into problem (problem_id, title, spj, 
      source, in_date, time_limit, 
      memory_limit, defunct, accepted, 
      submit, solved, description, 
      input, output, sample_input, 
      sample_output, hint)
    values (#{problemId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{spj,jdbcType=CHAR}, 
      #{source,jdbcType=VARCHAR}, #{inDate,jdbcType=TIMESTAMP}, #{timeLimit,jdbcType=INTEGER}, 
      #{memoryLimit,jdbcType=INTEGER}, #{defunct,jdbcType=CHAR}, #{accepted,jdbcType=INTEGER}, 
      #{submit,jdbcType=INTEGER}, #{solved,jdbcType=INTEGER}, #{description,jdbcType=LONGVARCHAR}, 
      #{input,jdbcType=LONGVARCHAR}, #{output,jdbcType=LONGVARCHAR}, #{sampleInput,jdbcType=LONGVARCHAR}, 
      #{sampleOutput,jdbcType=LONGVARCHAR}, #{hint,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.noi.oj.domain.ProblemWithBLOBs" useGeneratedKeys="true" keyProperty="problemId">
    insert into problem
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="problemId != null">
        problem_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="spj != null">
        spj,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="inDate != null">
        in_date,
      </if>
      <if test="timeLimit != null">
        time_limit,
      </if>
      <if test="memoryLimit != null">
        memory_limit,
      </if>
      <if test="defunct != null">
        defunct,
      </if>
      <if test="accepted != null">
        accepted,
      </if>
      <if test="submit != null">
        submit,
      </if>
      <if test="solved != null">
        solved,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="input != null">
        input,
      </if>
      <if test="output != null">
        output,
      </if>
      <if test="sampleInput != null">
        sample_input,
      </if>
      <if test="sampleOutput != null">
        sample_output,
      </if>
      <if test="hint != null">
        hint,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="problemId != null">
        #{problemId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="spj != null">
        #{spj,jdbcType=CHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="inDate != null">
        #{inDate,jdbcType=TIMESTAMP},
      </if>
      <if test="timeLimit != null">
        #{timeLimit,jdbcType=INTEGER},
      </if>
      <if test="memoryLimit != null">
        #{memoryLimit,jdbcType=INTEGER},
      </if>
      <if test="defunct != null">
        #{defunct,jdbcType=CHAR},
      </if>
      <if test="accepted != null">
        #{accepted,jdbcType=INTEGER},
      </if>
      <if test="submit != null">
        #{submit,jdbcType=INTEGER},
      </if>
      <if test="solved != null">
        #{solved,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="input != null">
        #{input,jdbcType=LONGVARCHAR},
      </if>
      <if test="output != null">
        #{output,jdbcType=LONGVARCHAR},
      </if>
      <if test="sampleInput != null">
        #{sampleInput,jdbcType=LONGVARCHAR},
      </if>
      <if test="sampleOutput != null">
        #{sampleOutput,jdbcType=LONGVARCHAR},
      </if>
      <if test="hint != null">
        #{hint,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.noi.oj.domain.ProblemExample" resultType="java.lang.Long">
    select count(*) from problem
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update problem
    <set>
      <if test="record.problemId != null">
        problem_id = #{record.problemId,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.spj != null">
        spj = #{record.spj,jdbcType=CHAR},
      </if>
      <if test="record.source != null">
        source = #{record.source,jdbcType=VARCHAR},
      </if>
      <if test="record.inDate != null">
        in_date = #{record.inDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.timeLimit != null">
        time_limit = #{record.timeLimit,jdbcType=INTEGER},
      </if>
      <if test="record.memoryLimit != null">
        memory_limit = #{record.memoryLimit,jdbcType=INTEGER},
      </if>
      <if test="record.defunct != null">
        defunct = #{record.defunct,jdbcType=CHAR},
      </if>
      <if test="record.accepted != null">
        accepted = #{record.accepted,jdbcType=INTEGER},
      </if>
      <if test="record.submit != null">
        submit = #{record.submit,jdbcType=INTEGER},
      </if>
      <if test="record.solved != null">
        solved = #{record.solved,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.input != null">
        input = #{record.input,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.output != null">
        output = #{record.output,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.sampleInput != null">
        sample_input = #{record.sampleInput,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.sampleOutput != null">
        sample_output = #{record.sampleOutput,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.hint != null">
        hint = #{record.hint,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update problem
    set problem_id = #{record.problemId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      spj = #{record.spj,jdbcType=CHAR},
      source = #{record.source,jdbcType=VARCHAR},
      in_date = #{record.inDate,jdbcType=TIMESTAMP},
      time_limit = #{record.timeLimit,jdbcType=INTEGER},
      memory_limit = #{record.memoryLimit,jdbcType=INTEGER},
      defunct = #{record.defunct,jdbcType=CHAR},
      accepted = #{record.accepted,jdbcType=INTEGER},
      submit = #{record.submit,jdbcType=INTEGER},
      solved = #{record.solved,jdbcType=INTEGER},
      description = #{record.description,jdbcType=LONGVARCHAR},
      input = #{record.input,jdbcType=LONGVARCHAR},
      output = #{record.output,jdbcType=LONGVARCHAR},
      sample_input = #{record.sampleInput,jdbcType=LONGVARCHAR},
      sample_output = #{record.sampleOutput,jdbcType=LONGVARCHAR},
      hint = #{record.hint,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update problem
    set problem_id = #{record.problemId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      spj = #{record.spj,jdbcType=CHAR},
      source = #{record.source,jdbcType=VARCHAR},
      in_date = #{record.inDate,jdbcType=TIMESTAMP},
      time_limit = #{record.timeLimit,jdbcType=INTEGER},
      memory_limit = #{record.memoryLimit,jdbcType=INTEGER},
      defunct = #{record.defunct,jdbcType=CHAR},
      accepted = #{record.accepted,jdbcType=INTEGER},
      submit = #{record.submit,jdbcType=INTEGER},
      solved = #{record.solved,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.noi.oj.domain.ProblemWithBLOBs">
    update problem
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="spj != null">
        spj = #{spj,jdbcType=CHAR},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="inDate != null">
        in_date = #{inDate,jdbcType=TIMESTAMP},
      </if>
      <if test="timeLimit != null">
        time_limit = #{timeLimit,jdbcType=INTEGER},
      </if>
      <if test="memoryLimit != null">
        memory_limit = #{memoryLimit,jdbcType=INTEGER},
      </if>
      <if test="defunct != null">
        defunct = #{defunct,jdbcType=CHAR},
      </if>
      <if test="accepted != null">
        accepted = #{accepted,jdbcType=INTEGER},
      </if>
      <if test="submit != null">
        submit = #{submit,jdbcType=INTEGER},
      </if>
      <if test="solved != null">
        solved = #{solved,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="input != null">
        input = #{input,jdbcType=LONGVARCHAR},
      </if>
      <if test="output != null">
        output = #{output,jdbcType=LONGVARCHAR},
      </if>
      <if test="sampleInput != null">
        sample_input = #{sampleInput,jdbcType=LONGVARCHAR},
      </if>
      <if test="sampleOutput != null">
        sample_output = #{sampleOutput,jdbcType=LONGVARCHAR},
      </if>
      <if test="hint != null">
        hint = #{hint,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where problem_id = #{problemId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.noi.oj.domain.ProblemWithBLOBs">
    update problem
    set title = #{title,jdbcType=VARCHAR},
      spj = #{spj,jdbcType=CHAR},
      source = #{source,jdbcType=VARCHAR},
      in_date = #{inDate,jdbcType=TIMESTAMP},
      time_limit = #{timeLimit,jdbcType=INTEGER},
      memory_limit = #{memoryLimit,jdbcType=INTEGER},
      defunct = #{defunct,jdbcType=CHAR},
      accepted = #{accepted,jdbcType=INTEGER},
      submit = #{submit,jdbcType=INTEGER},
      solved = #{solved,jdbcType=INTEGER},
      description = #{description,jdbcType=LONGVARCHAR},
      input = #{input,jdbcType=LONGVARCHAR},
      output = #{output,jdbcType=LONGVARCHAR},
      sample_input = #{sampleInput,jdbcType=LONGVARCHAR},
      sample_output = #{sampleOutput,jdbcType=LONGVARCHAR},
      hint = #{hint,jdbcType=LONGVARCHAR}
    where problem_id = #{problemId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.noi.oj.domain.Problem">
    update problem
    set title = #{title,jdbcType=VARCHAR},
      spj = #{spj,jdbcType=CHAR},
      source = #{source,jdbcType=VARCHAR},
      in_date = #{inDate,jdbcType=TIMESTAMP},
      time_limit = #{timeLimit,jdbcType=INTEGER},
      memory_limit = #{memoryLimit,jdbcType=INTEGER},
      defunct = #{defunct,jdbcType=CHAR},
      accepted = #{accepted,jdbcType=INTEGER},
      submit = #{submit,jdbcType=INTEGER},
      solved = #{solved,jdbcType=INTEGER}
    where problem_id = #{problemId,jdbcType=INTEGER}
  </update>
  <select id="count" parameterType="com.noi.oj.domain.Conditions" resultType="java.lang.Integer">
    select count(a.problem_id)
    from
    (select problem_id, title, spj, source, in_date, time_limit, memory_limit, defunct, accepted,
    submit, solved from problem
    <if test="title != null">
      where title like concat('%',#{title,jdbcType=VARCHAR},'%')
    </if> ) as a
    inner join (select packet_id,problem_id from problem_packet_ship where 1=1
    <if test="packetId != null">
      and packet_id = #{packetId,jdbcType=INTEGER}
    </if>) as b
    on a.problem_id = b.problem_id
    inner join (select packet_id,name from problem_packet) as c
    on b.packet_id = c.packet_id
    inner join (select distinct problem_id from problem_tag_ship as f
    <if test="tags != null">
      where 1=1
      <foreach collection="tags" item="item" index="index">
        and problem_id in (select problem_id from problem_tag_ship where tag_id = #{item})
      </foreach>
    </if>) as d on a.problem_id = d.problem_id
    inner join (select problem_id,difficulty,is_free,type from problem_class where 1=1
    <if test="difficulty != null">
      and difficulty = #{difficulty,jdbcType=TINYINT}
    </if>
    <if test="type != null">
      and type = #{type,jdbcType=TINYINT}
    </if>
    <if test="isFree != null">
      and is_free = #{isFree,jdbcType=TINYINT}
    </if> ) as e on a.problem_id=e.problem_id
    <if test="userId != null">
      left join (select distinct problem_id,result from solution where user_id = #{userId,jdbcType=BIGINT} and result = 4) as f
      on a.problem_id = f.problem_id
    </if>
    <if test="contestId != null">
      inner join (select problem_id from contest_problem where contest_id = #{contestId,jdbcType=INTEGER}) as g
      on a.problem_id = g.problem_id
    </if>
  </select>
  <select id="getList" parameterType="com.noi.oj.domain.Conditions" resultMap="BaseResultMap">
    select a.*,b.packet_id,c.name,e.difficulty,e.is_free,e.type
    <if test="userId != null">
      ,IFNULL(f.result,0) as result
    </if>
    from
    (select problem_id, title, spj, source, in_date, time_limit, memory_limit, defunct, accepted,
    submit, solved,rate from problem
    <if test="title != null">
        where title like concat('%',#{title,jdbcType=VARCHAR},'%')
    </if> ) as a
    inner join (select packet_id,problem_id from problem_packet_ship where 1=1
    <if test="packetId != null">
      and packet_id = #{packetId,jdbcType=INTEGER}
    </if>) as b
    on a.problem_id = b.problem_id
    inner join (select packet_id,name from problem_packet) as c
    on b.packet_id = c.packet_id
    inner join (select distinct problem_id from problem_tag_ship as f
    <if test="tags != null">
        where 1=1
        <foreach collection="tags" item="item" index="index">
            and problem_id in (select problem_id from problem_tag_ship where tag_id = #{item})
        </foreach>
    </if>) as d on a.problem_id = d.problem_id
    inner join (select problem_id,difficulty,is_free,type from problem_class where 1=1
    <if test="difficulty != null">
        and difficulty = #{difficulty,jdbcType=TINYINT}
    </if>
    <if test="type != null">
        and type = #{type,jdbcType=TINYINT}
    </if>
    <if test="isFree != null">
        and is_free = #{isFree,jdbcType=TINYINT}
    </if> ) as e on a.problem_id=e.problem_id
    <if test="userId != null">
      left join (select distinct problem_id,result from solution where user_id = #{userId,jdbcType=BIGINT} and result = 4) as f
      on a.problem_id = f.problem_id
    </if>
    <if test="contestId != null">
      inner join (select problem_id from contest_problem where contest_id = #{contestId,jdbcType=INTEGER}) as g
      on a.problem_id = g.problem_id
    </if>
    <if test="orderBy != null">
      order by #{orderBy,jdbcType=VARCHAR} desc
    </if>
    <if test="limit != null">
        <if test="offset != null">
            limit ${offset},${limit}
        </if>
        <if test="limit == null">
            limit ${limit}
        </if>
    </if>
  </select>
  <select id="selectPrimaryKey" resultType="java.lang.Integer">
    select problem_id
    from problem
  </select>
  <select id="selectContestProblem" resultMap="BaseResultMap" parameterType="com.noi.oj.domain.Conditions">
    select c.*
    from (select contest_id from contest where user_id=#{userId,jdbcType=BIGINT} and contest_id = #{contestId,jdbcType=INTEGER}) as a
    inner join (select problem_id,contest_id from contest_problem) as b
    on a.contest_id=b.contest_id
    inner join problem as c
    on b.problem_id = c.problem_id
  </select>
</mapper>